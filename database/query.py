''' This module keeps all the queries for database'''

CREATE_CREDENTIALS = ''' CREATE TABLE IF NOT EXISTS CREDENTIALS(
           ID TEXT PRIMARY KEY,
           USERNAME TEXT UNIQUE,
           PASSWORD TEXT,
           ROLE TEXT  
    )
'''
INSERT_CREDENTIALS = '''INSERT INTO CREDENTIALS(
            ID, USERNAME, PASSWORD, ROLE) 
            VALUES
            (?, ? ,?, ?)

'''
SELECT_CREDENTIALS_USERNAME = 'SELECT PASSWORD FROM CREDENTIALS WHERE USERNAME = ?'
SELECT_CREDENTIALS_PASSWORD = 'SELECT ROLE FROM CREDENTIALS WHERE USERNAME = ? AND PASSWORD = ?'
CREATE_CUSTOMER = ''' CREATE TABLE IF NOT EXISTS CUSTOMER(
            CUSTOMER_ID TEXT PRIMARY KEY,
            NAME TEXT,
            MOBILE_NUMBER INTEGER,
            GENDER TEXT,
            AGE INTEGER,
            EMAIL TEXT UNIQUE,
            FOREIGN KEY (CUSTOMER_ID) REFERENCES CREDENTIALS(ID) ON DELETE CASCADE
    )
'''
INSERT_CUSTOMER = '''INSERT INTO CUSTOMER(
            CUSTOMER_ID, NAME, MOBILE_NUMBER, GENDER, AGE, EMAIL) 
            VALUES
            (?, ?, ?, ?, ?, ?)
'''
CREATE_ADMIN = ''' CREATE TABLE IF NOT EXISTS ADMIN(
            ADMIN_ID TEXT PRIMARY KEY,
            NAME TEXT,
            MOBILE_NUMBER INTEGER,
            GENDER TEXT,
            AGE INTEGER,
            EMAIL TEXT UNIQUE,
            FOREIGN KEY (ADMIN_ID) REFERENCES CREDENTIALS(ID)
)
''' 
INSERT_ADMIN = '''INSERT INTO ADMIN(
                  ADMIN_ID,
                  NAME, 
                  MOBILE_NUMBER,
                  GENDER,
                  AGE,
                  EMAIL
) VALUES (?, ?, ?, ?, ?, ?)
'''
CREATE_PACKAGE = ''' CREATE TABLE IF NOT EXISTS PACKAGE(
            PACKAGE_ID TEXT PRIMARY KEY,
            PACKAGE_NAME TEXT,
            DURATION TEXT,
            CATEGORY TEXT,
            PRICE INTEGER,
            LMT INTEGER
)
'''
INSERT_PACKAGE = '''INSERT INTO PACKAGE(
            PACKAGE_ID,
            PACKAGE_NAME,
            DURATION,
            CATEGORY, 
            PRICE, 
            LMT
) VALUES (?, ?, ?, ?, ?, ?)'''

SELECT_PACKAGE_ADMIN = 'SELECT * FROM PACKAGE'
CREATE_ITINERARY = ''' CREATE TABLE IF NOT EXISTS ITINERARY(
            ITINERARY_ID TEXT PRIMARY KEY,
            PACKAGE_ID TEXT,
            DAY INTEGER,
            CITY TEXT,
            DESC TEXT,
            FOREIGN KEY (PACKAGE_ID) REFERENCES PACKAGE(PACKAGE_ID)
)
'''
DELETE_PACKAGE = 'DELETE FROM PACKAGE WHERE PACKAGE_ID = ?'
INSERT_ITINERARY = '''INSERT INTO ITINERARY(
            ITINERARY_ID,
            PACKAGE_ID,
            DAY,
            CITY,
            DESC
) VALUES (?, ?, ?, ?, ?)
'''

SELECT_ITINERARY = '''SELECT PACKAGE.PRICE, ITINERARY.CITY, ITINERARY.DESC
            FROM PACAKGE 
            INNER JOIN ITINERARY ON PACKAGE.PACKAGE_ID = ITINERARY.ITINERARY_ID
            WHERE PACAKGE.PACKAGE_NAME = ?
            AND PACKAGE.CATEGORY = ?
            AND PACKAGE.DURATION = ?

'''
SHOW_ITINERARY = 'SELECT * FROM ITINERARY'
DELETE_ITINERARY = 'DELETE FROM ITINERARY WHERE ITINERARY_ID = ?'
CREATE_BOOKING = ''' CREATE TABLE IF NOT EXISTS BOOKING(
            BOOKING_ID TEXT PRIMARY KEY,
            NAME VARCHAR,
            MOBILE_NUMBER INTEGER,
            START_DATE TEXT,
            END_DATE TEXT,
            NO_OF_PEOPLE INTEGER,
            EMAIL TEXT UNIQUE 
)
'''
INSERT_BOOKING = ''' INSERT INTO BOOKING
            (BOOKING_ID, NAME, MOBILE_NUMBER, START_DATE, END_DATE, NO_OF_PEOPLE, EMAIL, BOOKING_DATE)
            VALUES
            (?, ?, ?, ?, ?, ?, ?, ?)
'''
CREATE_BOOKING_PACKAGE = '''CREATE TABLE IF NOT EXISTS BOOKING_PACKAGE(
            FOREIGN KEY (PACKAGE_ID) REFERENCES PACKAGE (PACKAGE_ID)
            FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER (CUSTOMER_ID)
            FOREIGN KEY (BOOKING_ID) REFERENCES BOOKING(BOOKING_ID)
            BOOKING_DATE TEXT,
            PRICE INTEGER,
            LIMIT INTEGER
)
'''
ENABLE_FOREIGN_KEY = "PRAGMA foreign_keys = 1"
